// VoxelFPS_Basic.cpp â€” Minimal "superflat" voxel FPS with sprint+jump no prone/paraglide
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <iostream>
#include <vector>
#include <cmath>

const int SW = 800, SH = 600, RADIUS = 50;
float deltaTime = 0, lastFrame = 0;

glm::vec3 camPos(0, 2.6f, 0), vel(0);
float yaw = -90, pitch = 0;
bool onGround = false, firstMouse = true;
float lastX = SW / 2, lastY = SH / 2;

GLuint cubeVAO, cubeVBO, instanceVBO, outlineVAO;

void framebuffer_size_callback(GLFWwindow*, int w, int h) { glViewport(0, 0, w, h); }

void mouse_callback(GLFWwindow*, double xposIn, double yposIn) {
    float xpos = (float)xposIn, ypos = (float)yposIn;
    if (firstMouse) { lastX = xpos; lastY = ypos; firstMouse = false; }
    float dx = xpos - lastX, dy = lastY - ypos; lastX = xpos; lastY = ypos;
    float sens = 0.1f; dx *= sens; dy *= sens;
    yaw += dx; pitch += dy;
    if (pitch > 89)pitch = 89; if (pitch < -89)pitch = -89;
}

GLuint compileShaderProgram(const char* vert, const char* frag) {
    GLuint vs = glCreateShader(GL_VERTEX_SHADER); glShaderSource(vs, 1, &vert, nullptr); glCompileShader(vs);
    GLuint fs = glCreateShader(GL_FRAGMENT_SHADER); glShaderSource(fs, 1, &frag, nullptr); glCompileShader(fs);
    GLuint prog = glCreateProgram(); glAttachShader(prog, vs); glAttachShader(prog, fs); glLinkProgram(prog);
    glDeleteShader(vs); glDeleteShader(fs); return prog;
}

glm::ivec3 raycastBlock() {
    glm::vec3 dir = glm::normalize(glm::vec3(cos(glm::radians(yaw)) * cos(glm::radians(pitch)),
        sin(glm::radians(pitch)),
        sin(glm::radians(yaw)) * cos(glm::radians(pitch))));
    for (float t = 0; t < 10; t += 0.1f) {
        glm::vec3 p = camPos + dir * t;
        if (p.y >= 0 && p.y <= 1) {
            return glm::ivec3(floor(p.x), 0, floor(p.z));
        }
    }
    return glm::ivec3(-10000);
}

void processInput(GLFWwindow* win) {
    glm::vec3 dir(0);
    glm::vec3 front = glm::normalize(glm::vec3(cos(glm::radians(yaw)), 0, sin(glm::radians(yaw))));
    glm::vec3 right = glm::cross(front, glm::vec3(0, 1, 0));

    if (glfwGetKey(win, GLFW_KEY_W) == GLFW_PRESS) dir += front;
    if (glfwGetKey(win, GLFW_KEY_S) == GLFW_PRESS) dir -= front;
    if (glfwGetKey(win, GLFW_KEY_A) == GLFW_PRESS) dir -= right;
    if (glfwGetKey(win, GLFW_KEY_D) == GLFW_PRESS) dir += right;
    if (glm::length(dir) > 0.001f) dir = glm::normalize(dir);

    float speed = 10.0f;
    if (glfwGetKey(win, GLFW_KEY_LEFT_CONTROL) == GLFW_PRESS) speed *= 2.0f;

    glm::vec3 horizVel = dir * speed;
    vel.x = horizVel.x; vel.z = horizVel.z;

    if (onGround && glfwGetKey(win, GLFW_KEY_SPACE) == GLFW_PRESS) {
        vel.y = 5.0f;
        onGround = false;
    }

    if (glfwGetKey(win, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(win, true);
}

void handleCollision() {
    float feet = camPos.y - 1.6f;
    if (feet < 1.0f) {
        camPos.y = 1.0f + 1.6f;
        vel.y = 0;
        onGround = true;
    }
}

float cubeVerts[] = { // Position      Normal       Texcoord
    // Front
    -0.5f,-0.5f, 0.5f,0,0,1,0,0,   0.5f,-0.5f,0.5f,0,0,1,1,0,  0.5f,0.5f,0.5f,0,0,1,1,1,
    0.5f,0.5f,0.5f,0,0,1,1,1,  -0.5f,0.5f,0.5f,0,0,1,0,1, -0.5f,-0.5f,0.5f,0,0,1,0,0,
    // Right
    0.5f,-0.5f,0.5f,1,0,0,0,0, 0.5f,-0.5f,-0.5f,1,0,0,1,0, 0.5f,0.5f,-0.5f,1,0,0,1,1,
    0.5f,0.5f,-0.5f,1,0,0,1,1, 0.5f,0.5f,0.5f,1,0,0,0,1, 0.5f,-0.5f,0.5f,1,0,0,0,0,
    // Back
    0.5f,-0.5f,-0.5f,0,0,-1,0,0,-0.5f,-0.5f,-0.5f,0,0,-1,1,0,-0.5f,0.5f,-0.5f,0,0,-1,1,1,
    -0.5f,0.5f,-0.5f,0,0,-1,1,1,0.5f,0.5f,-0.5f,0,0,-1,0,1,0.5f,-0.5f,-0.5f,0,0,-1,0,0,
    // Left
    -0.5f,-0.5f,-0.5f,-1,0,0,0,0,-0.5f,-0.5f,0.5f,-1,0,0,1,0,-0.5f,0.5f,0.5f,-1,0,0,1,1,
    -0.5f,0.5f,0.5f,-1,0,0,1,1,-0.5f,0.5f,-0.5f,-1,0,0,0,1,-0.5f,-0.5f,-0.5f,-1,0,0,0,0,
    // Top
    -0.5f,0.5f,0.5f,0,1,0,0,0,0.5f,0.5f,0.5f,0,1,0,1,0,0.5f,0.5f,-0.5f,0,1,0,1,1,
    0.5f,0.5f,-0.5f,0,1,0,1,1,-0.5f,0.5f,-0.5f,0,1,0,0,1,-0.5f,0.5f,0.5f,0,1,0,0,0,
    // Bottom
    -0.5f,-0.5f,-0.5f,0,-1,0,0,0,0.5f,-0.5f,-0.5f,0,-1,0,1,0,0.5f,-0.5f,0.5f,0,-1,0,1,1,
    0.5f,-0.5f,0.5f,0,-1,0,1,1,-0.5f,-0.5f,0.5f,0,-1,0,0,1,-0.5f,-0.5f,-0.5f,0,-1,0,0,0 };

std::vector<glm::vec3> getChunks(const glm::vec3& pos) {
    std::vector<glm::vec3> v; int cx = (int)floor(pos.x), cz = (int)floor(pos.z);
    for (int z = cz - RADIUS; z <= cz + RADIUS; z++)
        for (int x = cx - RADIUS; x <= cx + RADIUS; x++)
            v.push_back(glm::vec3(x, 0, z));
    return v;
}

const char* vertSrc = R"(
#version 330 core
layout(location=0) in vec3 aPos;
layout(location=1) in vec3 aNorm;
layout(location=2) in vec2 texCoord;
layout(location=3) in vec3 offset;
uniform mat4 model,view,proj;
out vec2 TexCoord;
void main(){
    vec3 p=aPos+offset;
    gl_Position=proj*view*model*vec4(p,1);
    TexCoord=texCoord;
}
)";

const char* fragSrc = R"(
#version 330 core
in vec2 TexCoord;
out vec4 FragColor;
const float gridSize=24.0,lineWidth=0.02;
void main(){
    vec2 f=fract(TexCoord*gridSize);
    if(f.x<lineWidth||f.x>1.0-lineWidth||f.y<lineWidth||f.y>1.0-lineWidth)
        FragColor=vec4(0,0,0,1);
    else FragColor=vec4(1,1,1,1);
}
)";

int main() {
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    auto mon = glfwGetPrimaryMonitor();
    const GLFWvidmode* m = glfwGetVideoMode(mon);
    auto* win = glfwCreateWindow(m->width, m->height, "VoxelBasic", mon, NULL);
    glfwMakeContextCurrent(win);
    glfwSetFramebufferSizeCallback(win, framebuffer_size_callback);
    glfwSetCursorPosCallback(win, mouse_callback);
    glfwSetInputMode(win, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);
    glEnable(GL_DEPTH_TEST);

    GLuint shader = compileShaderProgram(vertSrc, fragSrc);

    glGenVertexArrays(1, &cubeVAO);
    glGenBuffers(1, &cubeVBO);
    glBindVertexArray(cubeVAO);
    glBindBuffer(GL_ARRAY_BUFFER, cubeVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(cubeVerts), cubeVerts, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glEnableVertexAttribArray(2);

    glGenBuffers(1, &instanceVBO);
    glBindBuffer(GL_ARRAY_BUFFER, instanceVBO);
    glBufferData(GL_ARRAY_BUFFER, 0, nullptr, GL_DYNAMIC_DRAW);
    glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, sizeof(glm::vec3), (void*)0);
    glEnableVertexAttribArray(3);
    glVertexAttribDivisor(3, 1);
    glBindVertexArray(0);

    glGenVertexArrays(1, &outlineVAO);
    glBindVertexArray(outlineVAO);
    glBindBuffer(GL_ARRAY_BUFFER, cubeVBO);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    glBindVertexArray(0);

    while (!glfwWindowShouldClose(win)) {
        float t = (float)glfwGetTime();
        deltaTime = t - lastFrame; lastFrame = t;

        processInput(win);

        if (!onGround) vel.y -= 9.81f * deltaTime;
        camPos += vel * deltaTime;
        handleCollision();

        glClearColor(0.53f, 0.81f, 0.92f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        glm::vec3 front = glm::normalize(glm::vec3(cos(glm::radians(yaw)) * cos(glm::radians(pitch)),
            sin(glm::radians(pitch)),
            sin(glm::radians(yaw)) * cos(glm::radians(pitch))));
        glm::mat4 view = glm::lookAt(camPos, camPos + front, glm::vec3(0, 1, 0));
        glm::mat4 projection = glm::perspective(glm::radians(103.f), (float)SW / (float)SH, 0.1f, 100.f);

        auto offsets = getChunks(camPos);
        glBindBuffer(GL_ARRAY_BUFFER, instanceVBO);
        glBufferData(GL_ARRAY_BUFFER, offsets.size() * sizeof(glm::vec3), offsets.data(), GL_DYNAMIC_DRAW);

        glUseProgram(shader);
        glm::mat4 model(1);
        glUniformMatrix4fv(glGetUniformLocation(shader, "model"), 1, GL_FALSE, glm::value_ptr(model));
        glUniformMatrix4fv(glGetUniformLocation(shader, "view"), 1, GL_FALSE, glm::value_ptr(view));
        glUniformMatrix4fv(glGetUniformLocation(shader, "proj"), 1, GL_FALSE, glm::value_ptr(projection));

        glBindVertexArray(cubeVAO);
        glDrawArraysInstanced(GL_TRIANGLES, 0, 36, offsets.size());
        glBindVertexArray(0);

        glm::ivec3 hit = raycastBlock();
        if (hit.x != -10000) {
            glm::mat4 outlineM = glm::translate(glm::mat4(1), glm::vec3(hit.x, 0, hit.z));
            outlineM = glm::scale(outlineM, glm::vec3(1.05f));
            glUseProgram(shader);
            glUniformMatrix4fv(glGetUniformLocation(shader, "model"), 1, GL_FALSE, glm::value_ptr(outlineM));
            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
            glLineWidth(2);
            glBindVertexArray(outlineVAO);
            glDrawArrays(GL_TRIANGLES, 0, 36);
            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
            glBindVertexArray(0);
        }

        glfwSwapBuffers(win);
        glfwPollEvents();
    }

    glDeleteVertexArrays(1, &cubeVAO);
    glDeleteBuffers(1, &cubeVBO);
    glDeleteBuffers(1, &instanceVBO);
    glDeleteVertexArrays(1, &outlineVAO);
    glDeleteProgram(shader);
    glfwTerminate();
}
