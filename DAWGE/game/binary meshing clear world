#define GL_SILENCE_DEPRECATION
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <iostream>
#include <unordered_set>
#include <vector>
#include <queue>
#include <cmath>

namespace std {
    template <> struct hash<glm::ivec3> {
        size_t operator()(const glm::ivec3& v) const {
            return (hash<int>()(v.x) * 73856093)
                ^ (hash<int>()(v.y) * 19349663)
                ^ (hash<int>()(v.z) * 83492791);
        }
    };
}

using namespace std;

unordered_set<glm::ivec3> removed;
int SW = 800, SH = 600;
float dt = 0, lastT = 0, yaw = -90, pitch = 0, lastX = 400, lastY = 300;
bool onGround = true, firstMouse = true;
glm::vec3 cam(0, 2.6f, 0), vel(0);

void framebuffer(GLFWwindow*, int w, int h) { glViewport(0, 0, w, h); }
void mouse(GLFWwindow*, double x, double y) {
    if (firstMouse) { lastX = x; lastY = y; firstMouse = false; }
    float dx = x - lastX, dy = lastY - y; lastX = x; lastY = y;
    yaw += dx * 0.1f; pitch += dy * 0.1f;
    pitch = glm::clamp(pitch, -89.f, 89.f);
}

GLuint makeProg(const char* vS, const char* fS) {
    GLuint v = glCreateShader(GL_VERTEX_SHADER), f = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(v, 1, &vS, nullptr); glCompileShader(v);
    glShaderSource(f, 1, &fS, nullptr); glCompileShader(f);
    GLuint p = glCreateProgram();
    glAttachShader(p, v); glAttachShader(p, f); glLinkProgram(p);
    glDeleteShader(v); glDeleteShader(f); return p;
}

glm::ivec3 raycast(glm::ivec3& prev, bool& hit) {
    glm::vec3 d = glm::normalize(glm::vec3(
        cos(glm::radians(yaw)) * cos(glm::radians(pitch)),
        sin(glm::radians(pitch)),
        sin(glm::radians(yaw)) * cos(glm::radians(pitch))));
    glm::ivec3 last; hit = false;
    for (float t = 0; t < 6; t += 0.05f) {
        glm::vec3 p = cam + d * t;
        glm::ivec3 b = floor(p);
        if (b != last) {
            if (b.y == 0 && !removed.count(b)) { hit = true; prev = last; return b; }
        }
        last = b;
    }
    return glm::ivec3(-10000);
}

void process(GLFWwindow* w) {
    glm::vec3 d(0), f(glm::normalize(glm::vec3(cos(glm::radians(yaw)), 0, sin(glm::radians(yaw)))));
    glm::vec3 r = glm::cross(f, glm::vec3(0, 1, 0));
    if (glfwGetKey(w, GLFW_KEY_W) == GLFW_PRESS)d += f;
    if (glfwGetKey(w, GLFW_KEY_S) == GLFW_PRESS)d -= f;
    if (glfwGetKey(w, GLFW_KEY_A) == GLFW_PRESS)d -= r;
    if (glfwGetKey(w, GLFW_KEY_D) == GLFW_PRESS)d += r;
    if (glm::length(d) > 0.01f) d = glm::normalize(d);
    float s = 10; if (glfwGetKey(w, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)s *= 2;
    vel.x = d.x * s; vel.z = d.z * s;
    if (onGround && glfwGetKey(w, GLFW_KEY_SPACE) == GLFW_PRESS) { vel.y = 5; onGround = false; }
    if (glfwGetKey(w, GLFW_KEY_ESCAPE) == GLFW_PRESS)glfwSetWindowShouldClose(w, true);
}

void collision() {
    float feet = cam.y - 1.6f;
    if (feet < 1) { cam.y = 2.6f; vel.y = 0; onGround = true; }
}

// Binary mesh the ground plane (y=0) in region [xmin,xmax]x[zmin,zmax], skipping removed blocks
struct Quad { int x0, z0, x1, z1; };
vector<Quad> binary_mesh(int xmin, int xmax, int zmin, int zmax, const unordered_set<glm::ivec3>& removed) {
    int W = xmax - xmin + 1, H = zmax - zmin + 1;
    vector<vector<bool>> solid(H, vector<bool>(W, true));
    for (int z = zmin; z <= zmax; ++z) for (int x = xmin; x <= xmax; ++x)
        if (removed.count(glm::ivec3(x, 0, z))) solid[z - zmin][x - xmin] = false;

    vector<Quad> quads;
    vector<vector<bool>> used = solid;
    for (int z = 0; z < H; ++z) for (int x = 0; x < W; ++x) {
        if (!solid[z][x] || !used[z][x]) continue;
        // Find maximal rectangle
        int x1 = x, z1 = z;
        while (x1 + 1 < W && used[z][x1 + 1]) ++x1;
        bool expand = true;
        while (expand && z1 + 1 < H) {
            for (int xx = x; xx <= x1; ++xx) if (!used[z1 + 1][xx]) { expand = false; break; }
            if (expand) ++z1;
        }
        // Mark as used
        for (int zz = z; zz <= z1; ++zz) for (int xx = x; xx <= x1; ++xx) used[zz][xx] = false;
        quads.push_back({ x + xmin, z + zmin, x1 + xmin, z1 + zmin });
    }
    return quads;
}

// Generate mesh for ground and walls around holes
struct Vertex { glm::vec3 pos; glm::vec3 normal; };
void build_mesh(vector<Vertex>& verts, int xmin, int xmax, int zmin, int zmax, const unordered_set<glm::ivec3>& removed) {
    // Ground mesh (top faces)
    auto quads = binary_mesh(xmin, xmax, zmin, zmax, removed);
    for (auto& q : quads) {
        float y = 0.0f;
        glm::vec3 n(0, 1, 0);
        // Two triangles per quad
        verts.push_back({ glm::vec3(q.x0, y, q.z0), n });
        verts.push_back({ glm::vec3(q.x1 + 1, y, q.z0), n });
        verts.push_back({ glm::vec3(q.x1 + 1, y, q.z1 + 1), n });
        verts.push_back({ glm::vec3(q.x1 + 1, y, q.z1 + 1), n });
        verts.push_back({ glm::vec3(q.x0, y, q.z1 + 1), n });
        verts.push_back({ glm::vec3(q.x0, y, q.z0), n });
    }
    // Walls around holes
    int dx[4] = { 1,-1,0,0 }, dz[4] = { 0,0,1,-1 };
    glm::vec3 normals[4] = { glm::vec3(-1,0,0), glm::vec3(1,0,0), glm::vec3(0,0,-1), glm::vec3(0,0,1) };
    for (int z = zmin; z <= zmax; ++z) for (int x = xmin; x <= xmax; ++x) {
        if (!removed.count(glm::ivec3(x, 0, z))) continue;
        for (int d = 0; d < 4; ++d) {
            int nx = x + dx[d], nz = z + dz[d];
            if (removed.count(glm::ivec3(nx, 0, nz))) continue;
            // Draw wall face at (x,z) in direction d
            float y0 = 0.0f, y1 = -1.0f;
            glm::vec3 n = normals[d];
            glm::vec3 a(x + 0.0f, y0, z + 0.0f), b(x + 1.0f, y0, z + 0.0f), c(x + 1.0f, y1, z + 0.0f), d0(x + 0.0f, y1, z + 0.0f);
            if (d == 0) { // -X
                a = glm::vec3(x, y0, z); b = glm::vec3(x, y0, z + 1); c = glm::vec3(x, y1, z + 1); d0 = glm::vec3(x, y1, z);
            }
            else if (d == 1) { // +X
                a = glm::vec3(x + 1, y0, z + 1); b = glm::vec3(x + 1, y0, z); c = glm::vec3(x + 1, y1, z); d0 = glm::vec3(x + 1, y1, z + 1);
            }
            else if (d == 2) { // -Z
                a = glm::vec3(x + 1, y0, z); b = glm::vec3(x, y0, z); c = glm::vec3(x, y1, z); d0 = glm::vec3(x + 1, y1, z);
            }
            else if (d == 3) { // +Z
                a = glm::vec3(x, y0, z + 1); b = glm::vec3(x + 1, y0, z + 1); c = glm::vec3(x + 1, y1, z + 1); d0 = glm::vec3(x, y1, z + 1);
            }
            verts.push_back({ a, n }); verts.push_back({ b, n }); verts.push_back({ c, n });
            verts.push_back({ c, n }); verts.push_back({ d0, n }); verts.push_back({ a, n });
        }
    }
}

// Grid shader: world-aligned grid on all faces
const char* vert = R"(#version 330 core
layout(location=0)in vec3 p;
layout(location=1)in vec3 n;
uniform mat4 view,proj;
out vec3 world;
out vec3 normal;
void main(){
    world = p;
    normal = n;
    gl_Position=proj*view*vec4(p,1);
})";

const char* frag = R"(#version 330 core
in vec3 world;
in vec3 normal;
out vec4 f;
const float g = 24.0, l = 0.02;
void main() {
    float alpha = 0.0;
    if (abs(normal.y) > 0.9) { // Top face: XZ grid
        vec2 q = fract(world.xz * g);
        alpha = (q.x < l || q.x > 1. - l || q.y < l || q.y > 1. - l) ? 1.0 : 0.0;
    } else { // Side faces: XY or YZ grid
        vec2 q;
        if (abs(normal.x) > 0.9)
            q = fract(world.zy * g);
        else
            q = fract(world.xy * g);
        alpha = (q.x < l || q.x > 1. - l || q.y < l || q.y > 1. - l) ? 1.0 : 0.0;
    }
    f = vec4(0,0,0,alpha);
})";

void crosshair() {
    glDisable(GL_DEPTH_TEST);
    glMatrixMode(GL_PROJECTION); glPushMatrix(); glLoadIdentity(); glOrtho(-1, 1, -1, 1, -1, 1);
    glMatrixMode(GL_MODELVIEW); glPushMatrix(); glLoadIdentity();
    glLineWidth(2);
    glBegin(GL_LINES); glColor3f(0, 1, 0);
    glVertex2f(-0.02f, 0); glVertex2f(0.02f, 0);
    glVertex2f(0, -0.02f); glVertex2f(0, 0.02f);
    glEnd();
    glPopMatrix(); glMatrixMode(GL_PROJECTION); glPopMatrix();
    glMatrixMode(GL_MODELVIEW); glEnable(GL_DEPTH_TEST);
}

int main() {
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_TRANSPARENT_FRAMEBUFFER, GLFW_TRUE);
    GLFWmonitor* mon = glfwGetPrimaryMonitor();
    auto mode = glfwGetVideoMode(mon);
    SW = mode->width; SH = mode->height; lastX = SW / 2; lastY = SH / 2;
    GLFWwindow* win = glfwCreateWindow(SW, SH, "Binary Meshed Grid", &*mon, nullptr);
    glfwMakeContextCurrent(win);
    glfwSetFramebufferSizeCallback(win, framebuffer);
    glfwSetCursorPosCallback(win, mouse);
    glfwSetInputMode(win, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
    gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    GLuint prog = makeProg(vert, frag);

    GLuint vao, vbo;
    glGenVertexArrays(1, &vao); glGenBuffers(1, &vbo);

    bool lprev = false;
    while (!glfwWindowShouldClose(win)) {
        float t = glfwGetTime();
        dt = t - lastT; lastT = t;
        process(win);
        if (!onGround) vel.y -= 9.81f * dt;
        cam += vel * dt;
        collision();

        glClearColor(0.53f, 0.81f, 0.92f, 1);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        glm::vec3 dir = glm::normalize(glm::vec3(
            cos(glm::radians(yaw)) * cos(glm::radians(pitch)),
            sin(glm::radians(pitch)),
            sin(glm::radians(yaw)) * cos(glm::radians(pitch))));
        glm::mat4 V = glm::lookAt(cam, cam + dir, glm::vec3(0, 1, 0));
        glm::mat4 P = glm::perspective(glm::radians(103.f), (float)SW / SH, 0.1f, 100.f);

        glm::ivec3 prev; bool hit;
        glm::ivec3 sel = raycast(prev, hit);

        bool lmb = glfwGetMouseButton(win, GLFW_MOUSE_BUTTON_LEFT) == GLFW_PRESS;

        if (lmb && !lprev && hit) {
            removed.insert(sel);
        }
        lprev = lmb;

        // Only mesh a region around the camera for performance
        int R = 50, x0 = (int)cam.x, z0 = (int)cam.z;
        vector<Vertex> verts;
        build_mesh(verts, x0 - R, x0 + R, z0 - R, z0 + R, removed);

        glBindVertexArray(vao);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * verts.size(), verts.data(), GL_DYNAMIC_DRAW);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)0); glEnableVertexAttribArray(0);
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)(sizeof(float) * 3)); glEnableVertexAttribArray(1);

        glUseProgram(prog);
        glUniformMatrix4fv(glGetUniformLocation(prog, "view"), 1, 0, glm::value_ptr(V));
        glUniformMatrix4fv(glGetUniformLocation(prog, "proj"), 1, 0, glm::value_ptr(P));
        glDrawArrays(GL_TRIANGLES, 0, verts.size());
        glBindVertexArray(0);

        crosshair();
        glfwSwapBuffers(win);
        glfwPollEvents();
    }
    glfwTerminate();
    return 0;
}
