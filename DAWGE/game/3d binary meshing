#define GL_SILENCE_DEPRECATION
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <iostream>
#include <unordered_set>
#include <vector>
#include <cmath>
#include <algorithm>
#include <random>

namespace std {
    template <> struct hash<glm::ivec3> {
        size_t operator()(const glm::ivec3& v) const {
            return (hash<int>()(v.x) * 73856093)
                ^ (hash<int>()(v.y) * 19349663)
                ^ (hash<int>()(v.z) * 83492791);
        }
    };
}

using namespace std;

// --- BEGIN PERLIN NOISE IMPLEMENTATION (Ken Perlin style, public domain) ---
static int p[512];
void init_perlin(unsigned int seed = 1337) {
    std::vector<int> perm(256);
    // Manual iota
    for (int i = 0; i < 256; ++i) perm[i] = i;
    // Shuffle
    std::mt19937 rng(seed);
    std::shuffle(perm.begin(), perm.end(), rng);
    for (int i = 0; i < 512; ++i) p[i] = perm[i & 255];
}
float fade(float t) { return t * t * t * (t * (t * 6 - 15) + 10); }
float my_lerp(float a, float b, float t) { return a + t * (b - a); }
float grad(int hash, float x, float y, float z) {
    int h = hash & 15;
    float u = h < 8 ? x : y, v = h < 4 ? y : (h == 12 || h == 14 ? x : z);
    return ((h & 1) ? -u : u) + ((h & 2) ? -v : v);
}
float perlin(float x, float y, float z) {
    int X = (int)floor(x) & 255, Y = (int)floor(y) & 255, Z = (int)floor(z) & 255;
    x -= floor(x); y -= floor(y); z -= floor(z);
    float u = fade(x), v = fade(y), w = fade(z);
    int A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z;
    int B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;
    return my_lerp(
        my_lerp(
            my_lerp(grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z), u),
            my_lerp(grad(p[AB], x, y - 1, z), grad(p[BB], x - 1, y - 1, z), u),
            v
        ),
        my_lerp(
            my_lerp(grad(p[AA + 1], x, y, z - 1), grad(p[BA + 1], x - 1, y, z - 1), u),
            my_lerp(grad(p[AB + 1], x, y - 1, z - 1), grad(p[BB + 1], x - 1, y - 1, z - 1), u),
            v
        ),
        w
    );
}
// --- END PERLIN NOISE IMPLEMENTATION ---

unordered_set<glm::ivec3> removed;
unordered_set<glm::ivec3> terrain_blocks;

int SW = 800, SH = 600;
float dt = 0, lastT = 0, yaw = -90, pitch = 0, lastX = 400, lastY = 300;
bool onGround = true, firstMouse = true;
glm::vec3 cam(0, 40.6f, 0), vel(0);

void framebuffer(GLFWwindow*, int w, int h) { glViewport(0, 0, w, h); }
void mouse(GLFWwindow*, double x, double y) {
    if (firstMouse) { lastX = x; lastY = y; firstMouse = false; }
    float dx = x - lastX, dy = lastY - y; lastX = x; lastY = y;
    yaw += dx * 0.1f; pitch += dy * 0.1f;
    pitch = glm::clamp(pitch, -89.f, 89.f);
}

GLuint makeProg(const char* vS, const char* fS) {
    GLuint v = glCreateShader(GL_VERTEX_SHADER), f = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(v, 1, &vS, nullptr); glCompileShader(v);
    glShaderSource(f, 1, &fS, nullptr); glCompileShader(f);
    GLuint p = glCreateProgram();
    glAttachShader(p, v); glAttachShader(p, f); glLinkProgram(p);
    glDeleteShader(v); glDeleteShader(f); return p;
}

glm::ivec3 raycast(glm::ivec3& prev, bool& hit) {
    glm::vec3 d = glm::normalize(glm::vec3(
        cos(glm::radians(yaw)) * cos(glm::radians(pitch)),
        sin(glm::radians(pitch)),
        sin(glm::radians(yaw)) * cos(glm::radians(pitch))));
    glm::ivec3 last; hit = false;
    for (float t = 0; t < 6; t += 0.05f) {
        glm::vec3 p = cam + d * t;
        glm::ivec3 b = floor(p);
        if (b != last) {
            if (terrain_blocks.count(b) && !removed.count(b)) { hit = true; prev = last; return b; }
        }
        last = b;
    }
    return glm::ivec3(-10000);
}

void process(GLFWwindow* w) {
    glm::vec3 d(0), f(glm::normalize(glm::vec3(cos(glm::radians(yaw)), 0, sin(glm::radians(yaw)))));
    glm::vec3 r = glm::cross(f, glm::vec3(0, 1, 0));
    if (glfwGetKey(w, GLFW_KEY_W) == GLFW_PRESS)d += f;
    if (glfwGetKey(w, GLFW_KEY_S) == GLFW_PRESS)d -= f;
    if (glfwGetKey(w, GLFW_KEY_A) == GLFW_PRESS)d -= r;
    if (glfwGetKey(w, GLFW_KEY_D) == GLFW_PRESS)d += r;
    if (glm::length(d) > 0.01f) d = glm::normalize(d);
    float s = 10; if (glfwGetKey(w, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)s *= 2;
    vel.x = d.x * s; vel.z = d.z * s;
    if (onGround && glfwGetKey(w, GLFW_KEY_SPACE) == GLFW_PRESS) { vel.y = 5; onGround = false; }
    if (glfwGetKey(w, GLFW_KEY_ESCAPE) == GLFW_PRESS)glfwSetWindowShouldClose(w, true);
}

void collision() {
    float feet = cam.y - 1.6f;
    if (feet < 1) { cam.y = 2.6f; vel.y = 0; onGround = true; }
}

// Generate terrain using 3D Perlin noise and a second 3D noise for erosion
void generate_terrain(int xmin, int xmax, int ymin, int ymax, int zmin, int zmax) {
    terrain_blocks.clear();
    float freq1 = 0.07f, freq2 = 0.15f;
    float erosion_strength = 0.6f;
    int surfaceY = 32;
    for (int x = xmin; x <= xmax; ++x) {
        for (int z = zmin; z <= zmax; ++z) {
            // Find topmost solid block at each (x, z)
            bool found = false;
            for (int y = ymax; y >= ymin; --y) {
                float base = perlin(x * freq1, y * freq1, z * freq1);
                float erosion = perlin(x * freq2 + 100, y * freq2 + 100, z * freq2 + 100);
                float density = base - erosion * erosion_strength - ((float)y - surfaceY) * 0.03f;
                if (density > 0.0f) {
                    terrain_blocks.insert(glm::ivec3(x, y, z));
                    found = true;
                    break; // Only the topmost solid block for this step
                }
            }
        }
    }
}

// Only render faces that are exposed to air
struct Vertex { glm::vec3 pos; glm::vec3 normal; };
void build_mesh(vector<Vertex>& verts, const unordered_set<glm::ivec3>& blocks, const unordered_set<glm::ivec3>& removed) {
    int dx[6] = { 1,-1,0,0,0,0 }, dy[6] = { 0,0,1,-1,0,0 }, dz[6] = { 0,0,0,0,1,-1 };
    glm::vec3 normals[6] = {
        glm::vec3(1,0,0), glm::vec3(-1,0,0),
        glm::vec3(0,1,0), glm::vec3(0,-1,0),
        glm::vec3(0,0,1), glm::vec3(0,0,-1)
    };
    for (const auto& b : blocks) {
        if (removed.count(b)) continue;
        for (int f = 0; f < 6; ++f) {
            glm::ivec3 nb = b + glm::ivec3(dx[f], dy[f], dz[f]);
            if (!blocks.count(nb) || removed.count(nb)) {
                // Draw face
                glm::vec3 n = normals[f];
                glm::vec3 p = glm::vec3(b);
                // Each face as two triangles
                glm::vec3 v0, v1, v2, v3;
                if (f == 0) { // +X
                    v0 = p + glm::vec3(1, 0, 0); v1 = p + glm::vec3(1, 1, 0); v2 = p + glm::vec3(1, 1, 1); v3 = p + glm::vec3(1, 0, 1);
                }
                else if (f == 1) { // -X
                    v0 = p + glm::vec3(0, 0, 1); v1 = p + glm::vec3(0, 1, 1); v2 = p + glm::vec3(0, 1, 0); v3 = p + glm::vec3(0, 0, 0);
                }
                else if (f == 2) { // +Y
                    v0 = p + glm::vec3(0, 1, 0); v1 = p + glm::vec3(0, 1, 1); v2 = p + glm::vec3(1, 1, 1); v3 = p + glm::vec3(1, 1, 0);
                }
                else if (f == 3) { // -Y
                    v0 = p + glm::vec3(0, 0, 1); v1 = p + glm::vec3(0, 0, 0); v2 = p + glm::vec3(1, 0, 0); v3 = p + glm::vec3(1, 0, 1);
                }
                else if (f == 4) { // +Z
                    v0 = p + glm::vec3(1, 0, 1); v1 = p + glm::vec3(1, 1, 1); v2 = p + glm::vec3(0, 1, 1); v3 = p + glm::vec3(0, 0, 1);
                }
                else { // -Z
                    v0 = p + glm::vec3(0, 0, 0); v1 = p + glm::vec3(0, 1, 0); v2 = p + glm::vec3(1, 1, 0); v3 = p + glm::vec3(1, 0, 0);
                }
                verts.push_back({ v0, n }); verts.push_back({ v1, n }); verts.push_back({ v2, n });
                verts.push_back({ v2, n }); verts.push_back({ v3, n }); verts.push_back({ v0, n });
            }
        }
    }
}

// Grid shader: world-aligned grid on all faces
const char* vert = R"(#version 330 core
layout(location=0)in vec3 p;
layout(location=1)in vec3 n;
uniform mat4 view,proj;
out vec3 world;
out vec3 normal;
void main(){
    world = p;
    normal = n;
    gl_Position=proj*view*vec4(p,1);
})";

const char* frag = R"(#version 330 core
in vec3 world;
in vec3 normal;
out vec4 f;
const float g = 24.0, l = 0.02;
void main() {
    float alpha = 0.0;
    if (abs(normal.y) > 0.9) { // Top face: XZ grid
        vec2 q = fract(world.xz * g);
        alpha = (q.x < l || q.x > 1. - l || q.y < l || q.y > 1. - l) ? 1.0 : 0.0;
    } else { // Side faces: XY or YZ grid
        vec2 q;
        if (abs(normal.x) > 0.9)
            q = fract(world.zy * g);
        else
            q = fract(world.xy * g);
        alpha = (q.x < l || q.x > 1. - l || q.y < l || q.y > 1. - l) ? 1.0 : 0.0;
    }
    f = vec4(0,0,0,alpha);
})";

void crosshair() {
    glDisable(GL_DEPTH_TEST);
    glMatrixMode(GL_PROJECTION); glPushMatrix(); glLoadIdentity(); glOrtho(-1, 1, -1, 1, -1, 1);
    glMatrixMode(GL_MODELVIEW); glPushMatrix(); glLoadIdentity();
    glLineWidth(2);
    glBegin(GL_LINES); glColor3f(0, 1, 0);
    glVertex2f(-0.02f, 0); glVertex2f(0.02f, 0);
    glVertex2f(0, -0.02f); glVertex2f(0, 0.02f);
    glEnd();
    glPopMatrix(); glMatrixMode(GL_PROJECTION); glPopMatrix();
    glMatrixMode(GL_MODELVIEW); glEnable(GL_DEPTH_TEST);
}

int main() {
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_TRANSPARENT_FRAMEBUFFER, GLFW_TRUE);
    GLFWmonitor* mon = glfwGetPrimaryMonitor();
    auto mode = glfwGetVideoMode(mon);
    SW = mode->width; SH = mode->height; lastX = SW / 2; lastY = SH / 2;
    GLFWwindow* win = glfwCreateWindow(SW, SH, "3D Perlin Terrain", &*mon, nullptr);
    glfwMakeContextCurrent(win);
    glfwSetFramebufferSizeCallback(win, framebuffer);
    glfwSetCursorPosCallback(win, mouse);
    glfwSetInputMode(win, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
    gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    GLuint prog = makeProg(vert, frag);

    GLuint vao, vbo;
    glGenVertexArrays(1, &vao); glGenBuffers(1, &vbo);

    init_perlin(1337);

    int R = 50, ymin = 0, ymax = 64;
    int x0 = 0, z0 = 0;
    generate_terrain(x0 - R, x0 + R, ymin, ymax, z0 - R, z0 + R);

    bool lprev = false;
    while (!glfwWindowShouldClose(win)) {
        float t = glfwGetTime();
        dt = t - lastT; lastT = t;
        process(win);
        if (!onGround) vel.y -= 9.81f * dt;
        cam += vel * dt;
        collision();

        glClearColor(0.53f, 0.81f, 0.92f, 1);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        glm::vec3 dir = glm::normalize(glm::vec3(
            cos(glm::radians(yaw)) * cos(glm::radians(pitch)),
            sin(glm::radians(pitch)),
            sin(glm::radians(yaw)) * cos(glm::radians(pitch))));
        glm::mat4 V = glm::lookAt(cam, cam + dir, glm::vec3(0, 1, 0));
        glm::mat4 P = glm::perspective(glm::radians(103.f), (float)SW / SH, 0.1f, 200.f);

        glm::ivec3 prev; bool hit;
        glm::ivec3 sel = raycast(prev, hit);

        bool lmb = glfwGetMouseButton(win, GLFW_MOUSE_BUTTON_LEFT) == GLFW_PRESS;

        if (lmb && !lprev && hit) {
            removed.insert(sel);
        }
        lprev = lmb;

        // Only mesh a region around the camera for performance
        int cx = (int)cam.x, cz = (int)cam.z;
        if (abs(cx - x0) > R / 2 || abs(cz - z0) > R / 2) {
            x0 = cx; z0 = cz;
            generate_terrain(x0 - R, x0 + R, ymin, ymax, z0 - R, z0 + R);
        }

        vector<Vertex> verts;
        build_mesh(verts, terrain_blocks, removed);

        glBindVertexArray(vao);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * verts.size(), verts.data(), GL_DYNAMIC_DRAW);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)0); glEnableVertexAttribArray(0);
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)(sizeof(float) * 3)); glEnableVertexAttribArray(1);

        glUseProgram(prog);
        glUniformMatrix4fv(glGetUniformLocation(prog, "view"), 1, 0, glm::value_ptr(V));
        glUniformMatrix4fv(glGetUniformLocation(prog, "proj"), 1, 0, glm::value_ptr(P));
        glDrawArrays(GL_TRIANGLES, 0, verts.size());
        glBindVertexArray(0);

        crosshair();
        glfwSwapBuffers(win);
        glfwPollEvents();
    }
    glfwTerminate();
    return 0;
}
